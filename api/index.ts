import express from "express";
import { registerRoutes } from "../server/routes-vercel.js";
import type { Request, Response } from "express";

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
let app: express.Application | null = null;
let isInitialized = false;

async function getApp() {
  if (app && isInitialized) {
    return app;
  }

  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Vercel...');
  
  app = express();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Vercel
  process.env.NODE_ENV = process.env.NODE_ENV || 'production';
  process.env.VERCEL = 'true';

  // CORS middleware - –î–û–õ–ñ–ï–ù –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
  app.use((req: any, res: any, next: any) => {
    const origin = req.headers.origin || '*';
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è Telegram Web App
    res.setHeader('Access-Control-Allow-Origin', origin);
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, X-CSRF-Token');
    res.setHeader('Access-Control-Max-Age', '86400');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }
    next();
  });

  // Body parser middleware
  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true, limit: '10mb' }));

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ development)
  if (process.env.NODE_ENV !== 'production') {
    app.use((req, res, next) => {
      console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
      next();
    });
  }

  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    await registerRoutes(app as any);
    isInitialized = true;
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Vercel');
    
    return app;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    isInitialized = false;
    app = null;
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
export default async function handler(req: Request, res: Response) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const app = await getApp();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
    const timeout = setTimeout(() => {
      if (!res.headersSent) {
        console.error('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:', req.method, req.url);
        res.status(504).json({ 
          error: 'Gateway Timeout',
          message: 'Request took too long to process' 
        });
      }
    }, 55000); // 55 —Å–µ–∫—É–Ω–¥ (–º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç Vercel –≤ 60 —Å–µ–∫)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Express app –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    return new Promise((resolve, reject) => {
      (app as any)(req, res, (error: any) => {
        clearTimeout(timeout);
        
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Express app:', error);
          if (!res.headersSent) {
            res.status(500).json({ 
              error: 'Internal Server Error',
              message: process.env.NODE_ENV === 'production' 
                ? 'An error occurred' 
                : error.message 
            });
          }
          reject(error);
        } else {
          resolve(undefined);
        }
      });
    });
    
  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Vercel:', error);
    if (!res.headersSent) {
      res.status(500).json({ 
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'production' 
          ? 'An error occurred while processing your request' 
          : error.message 
      });
    }
  }
}